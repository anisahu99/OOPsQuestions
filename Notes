After writing a custom constructor in C++/Java, the default constructor is no longer provided automatically by the compiler. This is because the presence of a custom constructor suppresses the automatic generation of the default constructor.

struct Triplet
{
    int first, second;
    Triplet()const{
/*
The error occurs because you declared the constructor Triplet() as const. When you mark a constructor/destructor as const, it means that the constructor/destructor is not allowed to modify any member variables of the class. However, a constructor's primary purpose is to initialize (modify) the member variables of the object, which makes the const qualifier inappropriate for constructors/destructors.
*/
        
    }
};





public - members are accessible from outside the class
private - members cannot be accessed (or viewed) from outside the class
protected - members cannot be accessed from outside the class, however, they can be accessed in inherited classes.








// Static Data Members: Link:- "https://www.geeksforgeeks.org/cpp-static-data-members/"

Static data members are class members that are declared using static keywords. A static member has certain special characteristics which are as follows:

    Only one copy of that member is created for the entire class and is shared by all the objects of that class, no matter how many objects are created.
    It is initialized before any object of this class is created, even before the main starts outside the class itself.
    It is visible can be controlled with the class access specifiers.
    Its lifetime is the entire program.

Defining Static Data Member

As told earlier, the static members are only declared in the class declaration. If we try to access the static data member without an explicit definition, the compiler will give an error.

To access the static data member of any class we have to define it first and static data members are defined outside the class definition. The only exception to this are static const data members of integral type which can be initialized in the class declaration.

// Static Method
A static member function can only access static data member, other static member functions and any other functions from outside the class.

Static member functions have a class scope and they do not have access to the 'this'(this->non-static-attribute-of-class) pointer of the class.





// Friend function and Classes

A friend class can access private and protected members of other class in which it is declared as friend.
A friend function can also be given special grant to access private and protected members.
A friend can be:
a) a method of another class
b) a global function
link: "https://www.geeksforgeeks.org/friend-class-function-cpp/"





// Const Member function in Classes in C++
Why are const Functions used in C++?

We use const member functions in C++ to avoid accidental object changes. It is highly recommended to make as many functions const as possible so that the chances of error in the program are minimal.
Const Member Function Use Cases

The two use cases of the const member function are as follows:

    A const member function is called by any type of object, i.e., either by a const or a non-const object.
    A non-const function can only be called by a non-const object, and a const function cannot call it.


